buildscript {
    ext {
        artifactId = 'template'
        artifactGroup = 'aug.bueno'
        artifactVersion = '0.0.1-SNAPSHOT'

        springBootVersion = '2.3.1.RELEASE'
        springDependencyManagement = '1.0.9.RELEASE'

        junitVersion = '5.6.2'

        spotBugsVersion = '4.4.2'
        checkstyleVersion = '8.32'
        pmdVersion = '6.23.0'
        sonarqubeVersion = '3.0'
    }
}

plugins {
    id 'org.springframework.boot' version "${springBootVersion}" apply false
    id 'io.spring.dependency-management' version "${springDependencyManagement}" apply false
    id "org.sonarqube" version "${sonarqubeVersion}"
    id "com.github.spotbugs" version "${spotBugsVersion}"  apply false
    id 'java'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "Hoxton.SR5")
}

subprojects {

    group "${artifactGroup}"
    version "${artifactVersion}"

    sourceCompatibility = JavaVersion.VERSION_1_8

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "checkstyle"
    apply plugin: "com.github.spotbugs"
    apply plugin: "pmd"
    apply plugin: "org.sonarqube"

//    apply plugin: 'idea'

    // IntelliJ IDEA : project build path
    //    idea {
    //        module {
    //            inheritOutputDirs = true
    //            outputDir = compileJava.destinationDir
    //            testOutputDir = compileTestJava.destinationDir
    //        }
    //    }

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-data-rest'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

        //	implementation 'org.springframework.boot:spring-boot-starter-batch'
        //	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
        //	implementation 'org.springframework.boot:spring-boot-starter-security'
        //	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
        //	implementation 'org.springframework.boot:spring-boot-starter-webflux'
        //	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
        //	implementation 'org.springframework.session:spring-session-core'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

        // Flywaydb
        //	implementation 'org.flywaydb:flyway-core'

        // H2
        runtimeOnly 'com.h2database:h2'

        //Lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        //Test session
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }

        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

        testImplementation 'io.projectreactor:reactor-test'
        //  testImplementation 'org.springframework.batch:spring-batch-test'
        //  testImplementation 'org.springframework.security:spring-security-test'

    }

    test {
        useJUnitPlatform()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    checkstyle {
        configFile = rootProject.file('config/checkstyle/checkstyle.xml') // default value, the line can be remove
        toolVersion = "${checkstyleVersion}"
        ignoreFailures = true
    }

    spotbugs {
        ignoreFailures = false
    }

    pmd {
        consoleOutput = true
        ignoreFailures = false
        toolVersion = "${pmdVersion}"
        rulePriority = 2
        ruleSets = ["category/java/errorprone.xml",
                    "category/java/bestpractices.xml",
                    "category/java/codestyle.xml",
                    "category/java/design.xml",
                    "category/java/documentation.xml",
                    "category/java/errorprone.xml",
                    "category/java/multithreading.xml",
                    "category/java/performance.xml",
                    "category/java/security.xml"
        ]
    }

    sonarqube {
        properties {
            property "sonar.host.url", "https://sonarcloud.io"
            property "sonar.language", "java"
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.sources", "src/main/java"
            property "sonar.exclusions", "**/*Test*.*, **/Q*.java"
            property "sonar.test.inclusions", "**/*Test.java"
            property "sonar.coverage.exclusions", "**/*Test*.*, **/Q*.java"
            property "sonar.java.junit.reportPaths", "${buildDir}/test-results"
            property "sonar.jacoco.reportPaths", "${buildDir}/jacoco/jacoco.exec"
        }
    }
}

